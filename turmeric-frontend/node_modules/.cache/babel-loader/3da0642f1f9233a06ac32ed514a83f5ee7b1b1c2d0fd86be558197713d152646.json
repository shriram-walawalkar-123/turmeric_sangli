{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Save, AlertCircle, MapPin, Loader } from 'lucide-react';\n// import { FORM_FIELDS, ROLES } from '../utils/constants';\n// import { API } from '../config/api';\n\n// const DataEntryForm = ({ userRole }) => {\n//   const [formData, setFormData] = useState({});\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [gpsLoading, setGpsLoading] = useState(false);\n//   const [gpsError, setGpsError] = useState('');\n//   const [locationCaptured, setLocationCaptured] = useState(false);\n\n//   // Reset form and location state when userRole changes\n//   useEffect(() => {\n//     setFormData({});\n//     setLocationCaptured(false);\n//     setGpsError('');\n//     setError('');\n//     setSuccess('');\n//   }, [userRole]);\n\n//   const getFormFields = () => {\n//     switch (userRole) {\n//       case 'farmer': return FORM_FIELDS.HARVEST;\n//       case 'processor': return FORM_FIELDS.PROCESSING;\n//       case 'distributor': return FORM_FIELDS.DISTRIBUTOR;\n//       case 'supplier': return FORM_FIELDS.SUPPLIER;\n//       case 'shopkeeper': return FORM_FIELDS.SHOPKEEPER;\n//       default: return [];\n//     }\n//   };\n\n//   const getRoleInfo = () => {\n//     return ROLES.find(role => role.id === userRole);\n//   };\n\n//   // Check if form has GPS fields\n//   const hasGPSFields = () => {\n//     const fields = getFormFields();\n//     return fields.some(field => \n//       field.name === 'latitude' || \n//       field.name === 'longitude' || \n//       field.name === 'gps_coordinates' ||\n//       field.name === 'location_lat' ||\n//       field.name === 'location_lng' ||\n//       field.name === 'gps_location' ||\n//       field.name === 'processing_gps' ||\n//       field.name === 'farm_gps' ||\n//       field.name === 'warehouse_gps' ||\n//       field.name === 'shop_gps'\n//     );\n//   };\n\n//   // Get current GPS location\n//   const getCurrentLocation = () => {\n//     return new Promise((resolve, reject) => {\n//       if (!navigator.geolocation) {\n//         reject(new Error('Geolocation is not supported by your browser'));\n//         return;\n//       }\n\n//       setGpsLoading(true);\n//       setGpsError('');\n\n//       navigator.geolocation.getCurrentPosition(\n//         (position) => {\n//           resolve({\n//             latitude: position.coords.latitude,\n//             longitude: position.coords.longitude,\n//             accuracy: position.coords.accuracy\n//           });\n//           setGpsLoading(false);\n//         },\n//         (error) => {\n//           let errorMessage = 'Unable to retrieve location';\n//           switch (error.code) {\n//             case error.PERMISSION_DENIED:\n//               errorMessage = 'Location access denied. Please enable location permissions.';\n//               break;\n//             case error.POSITION_UNAVAILABLE:\n//               errorMessage = 'Location information unavailable.';\n//               break;\n//             case error.TIMEOUT:\n//               errorMessage = 'Location request timed out.';\n//               break;\n//             default:\n//               errorMessage = 'An unknown error occurred while getting location.';\n//           }\n//           setGpsError(errorMessage);\n//           setGpsLoading(false);\n//           reject(new Error(errorMessage));\n//         },\n//         {\n//           enableHighAccuracy: true,\n//           timeout: 10000,\n//           maximumAge: 0\n//         }\n//       );\n//     });\n//   };\n\n//   const handleGetLocation = async () => {\n//     try {\n//       const location = await getCurrentLocation();\n//       const fields = getFormFields();\n\n//       // Update form data based on field names present in current role\n//       setFormData(prev => {\n//         const updated = { ...prev };\n\n//         fields.forEach(field => {\n//           // Handle various GPS field naming conventions\n//           if (field.name === 'latitude' || field.name === 'location_lat') {\n//             updated[field.name] = location.latitude.toFixed(6);\n//           }\n//           if (field.name === 'longitude' || field.name === 'location_lng') {\n//             updated[field.name] = location.longitude.toFixed(6);\n//           }\n//           if (field.name === 'gps_coordinates' || \n//               field.name === 'gps_location' || \n//               field.name === 'processing_gps' ||\n//               field.name === 'farm_gps' ||\n//               field.name === 'warehouse_gps' ||\n//               field.name === 'shop_gps') {\n//             updated[field.name] = `${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`;\n//           }\n//         });\n\n//         return updated;\n//       });\n\n//       setLocationCaptured(true);\n//       setSuccess(`Location captured for ${roleInfo.name} (Accuracy: ${location.accuracy.toFixed(0)}m)`);\n//       setTimeout(() => setSuccess(''), 3000);\n//     } catch (err) {\n//       setLocationCaptured(false);\n//       // Error is already set by getCurrentLocation\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { name, value, type, checked } = e.target;\n//     setFormData(prev => ({\n//       ...prev,\n//       [name]: type === 'checkbox' ? checked : value\n//     }));\n//     setError('');\n//   };\n\n//   const validateForm = () => {\n//     const fields = getFormFields();\n//     for (let field of fields) {\n//       if (field.required && !formData[field.name]) {\n//         setError(`${field.label} is required`);\n//         return false;\n//       }\n//     }\n\n//     // Check if GPS fields are required and captured\n//     if (hasGPSFields() && !locationCaptured) {\n//       setError('Please capture GPS location before submitting');\n//       return false;\n//     }\n\n//     return true;\n//   };\n\n//   const buildSubmitData = () => {\n//     const data = { ...formData };\n\n//     // Normalize supplier shopkeeper list (textarea or array)\n//     if (userRole === 'supplier') {\n//       const raw = data.shopkeeper_list;\n//       if (Array.isArray(raw)) {\n//         data.shopkeeper_list = raw;\n//       } else if (typeof raw === 'string' && raw.trim() !== '') {\n//         data.shopkeeper_list = raw.split(',').map(s => s.trim()).filter(Boolean);\n//       } else {\n//         data.shopkeeper_list = [];\n//       }\n//     }\n\n//     // Normalize numbers for processing\n//     if (userRole === 'processor') {\n//       if (data.moisture_content !== undefined && data.moisture_content !== '') {\n//         data.moisture_content = Number(data.moisture_content);\n//       }\n//       if (data.curcumin_content !== undefined && data.curcumin_content !== '') {\n//         data.curcumin_content = Number(data.curcumin_content);\n//       }\n//     }\n\n//     // Convert GPS coordinates to numbers if needed\n//     if (data.latitude) data.latitude = Number(data.latitude);\n//     if (data.longitude) data.longitude = Number(data.longitude);\n//     if (data.location_lat) data.location_lat = Number(data.location_lat);\n//     if (data.location_lng) data.location_lng = Number(data.location_lng);\n\n//     return data;\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!validateForm()) {\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const submitData = buildSubmitData();\n//       let response;\n\n//       switch (userRole) {\n//         case 'farmer':\n//           response = await API.addHarvest(submitData);\n//           break;\n//         case 'processor':\n//           response = await API.addProcessing(submitData);\n//           break;\n//         case 'distributor':\n//           response = await API.addDistributor(submitData);\n//           break;\n//         case 'supplier':\n//           response = await API.addSupplier(submitData);\n//           break;\n//         case 'shopkeeper':\n//           response = await API.addShopkeeper(submitData);\n//           break;\n//         case 'admin':\n//           response = await API.addPacket(submitData);\n//           break;\n//         default:\n//           throw new Error('Invalid role');\n//       }\n\n//       setSuccess(response?.data?.message || 'Data submitted successfully!');\n//       setFormData({});\n//       setLocationCaptured(false);\n//       setTimeout(() => setSuccess(''), 3000);\n//     } catch (err) {\n//       setError(err.response?.data?.error || err.message || 'Failed to submit data');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const roleInfo = getRoleInfo();\n//   const fields = getFormFields();\n//   const IconComponent = roleInfo?.icon;\n\n//   if (!roleInfo) {\n//     return null;\n//   }\n\n//   const isGPSField = (fieldName) => {\n//     return fieldName === 'latitude' || \n//            fieldName === 'longitude' || \n//            fieldName === 'gps_coordinates' ||\n//            fieldName === 'location_lat' ||\n//            fieldName === 'location_lng' ||\n//            fieldName === 'gps_location' ||\n//            fieldName === 'processing_gps' ||\n//            fieldName === 'farm_gps' ||\n//            fieldName === 'warehouse_gps' ||\n//            fieldName === 'shop_gps';\n//   };\n\n//   return (\n//     <div className=\"bg-white rounded-lg shadow-lg p-6\">\n//       <div className=\"flex items-center gap-3 mb-6\">\n//         {IconComponent && (\n//           <div className={`bg-${roleInfo.color}-100 p-3 rounded-lg`}>\n//             <IconComponent className={`text-${roleInfo.color}-600`} size={24} />\n//           </div>\n//         )}\n//         <div>\n//           <h2 className=\"text-2xl font-bold text-gray-800\">\n//             {roleInfo.name} Data Entry\n//           </h2>\n//           <p className=\"text-sm text-gray-500\">{roleInfo.description}</p>\n//         </div>\n//       </div>\n\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border-l-4 border-red-500 rounded flex items-start gap-2\">\n//           <AlertCircle className=\"text-red-500 mt-0.5\" size={20} />\n//           <div>\n//             <p className=\"font-medium text-red-800\">Error</p>\n//             <p className=\"text-sm text-red-600\">{error}</p>\n//           </div>\n//         </div>\n//       )}\n\n//       {gpsError && (\n//         <div className=\"mb-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded flex items-start gap-2\">\n//           <AlertCircle className=\"text-yellow-600 mt-0.5\" size={20} />\n//           <div>\n//             <p className=\"font-medium text-yellow-800\">Location Error</p>\n//             <p className=\"text-sm text-yellow-700\">{gpsError}</p>\n//           </div>\n//         </div>\n//       )}\n\n//       {success && (\n//         <div className=\"mb-4 p-4 bg-green-50 border-l-4 border-green-500 rounded flex items-start gap-2\">\n//           <AlertCircle className=\"text-green-500 mt-0.5\" size={20} />\n//           <div>\n//             <p className=\"font-medium text-green-800\">Success</p>\n//             <p className=\"text-sm text-green-600\">{success}</p>\n//           </div>\n//         </div>\n//       )}\n\n//       {hasGPSFields() && (\n//         <div className={`mb-4 p-4 border rounded-lg ${\n//           locationCaptured ? 'bg-green-50 border-green-200' : 'bg-blue-50 border-blue-200'\n//         }`}>\n//           <div className=\"flex items-center justify-between\">\n//             <div className=\"flex items-center gap-2\">\n//               <MapPin className={locationCaptured ? 'text-green-600' : 'text-blue-600'} size={20} />\n//               <div>\n//                 <span className={`text-sm font-medium ${\n//                   locationCaptured ? 'text-green-900' : 'text-blue-900'\n//                 }`}>\n//                   GPS Location for {roleInfo.name} Stage\n//                 </span>\n//                 {locationCaptured && (\n//                   <p className=\"text-xs text-green-700 mt-1\">\n//                     ✓ Location captured for this stage\n//                   </p>\n//                 )}\n//               </div>\n//             </div>\n//             <button\n//               type=\"button\"\n//               onClick={handleGetLocation}\n//               disabled={gpsLoading}\n//               className={`flex items-center gap-2 px-4 py-2 text-white rounded-lg transition-colors text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed ${\n//                 locationCaptured \n//                   ? 'bg-green-600 hover:bg-green-700' \n//                   : 'bg-blue-600 hover:bg-blue-700'\n//               }`}\n//             >\n//               {gpsLoading ? (\n//                 <>\n//                   <Loader className=\"animate-spin\" size={16} />\n//                   <span>Getting Location...</span>\n//                 </>\n//               ) : (\n//                 <>\n//                   <MapPin size={16} />\n//                   <span>{locationCaptured ? 'Update Location' : 'Capture Location'}</span>\n//                 </>\n//               )}\n//             </button>\n//           </div>\n//           {!locationCaptured && (\n//             <p className=\"text-xs text-blue-700 mt-2\">\n//               Click \"Capture Location\" to get GPS coordinates for this {roleInfo.name.toLowerCase()} stage.\n//             </p>\n//           )}\n//         </div>\n//       )}\n\n//       <form onSubmit={handleSubmit}>\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n//           {fields.map(field => (\n//             <div \n//               key={field.name} \n//               className={field.type === 'textarea' ? 'md:col-span-2' : ''}\n//             >\n//               <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n//                 {field.label}\n//                 {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n//                 {isGPSField(field.name) && (\n//                   <span className=\"ml-2 text-xs text-blue-600 font-normal\">\n//                     (Auto-captured)\n//                   </span>\n//                 )}\n//               </label>\n\n//               {field.type === 'textarea' ? (\n//                 <textarea\n//                   name={field.name}\n//                   value={formData[field.name] || ''}\n//                   onChange={handleChange}\n//                   className=\"w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-500 focus:border-transparent outline-none transition\"\n//                   rows=\"3\"\n//                   placeholder={field.label}\n//                 />\n//               ) : field.type === 'checkbox' ? (\n//                 <div className=\"flex items-center\">\n//                   <input\n//                     type=\"checkbox\"\n//                     name={field.name}\n//                     checked={formData[field.name] || false}\n//                     onChange={handleChange}\n//                     className=\"w-5 h-5 text-green-600 border-gray-300 rounded focus:ring-green-500\"\n//                   />\n//                   <span className=\"ml-2 text-sm text-gray-600\">\n//                     Mark as organic certified\n//                   </span>\n//                 </div>\n//               ) : (\n//                 <input\n//                   type={field.type}\n//                   name={field.name}\n//                   value={formData[field.name] || ''}\n//                   onChange={handleChange}\n//                   readOnly={isGPSField(field.name)}\n//                   className={`w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-500 focus:border-transparent outline-none transition ${\n//                     isGPSField(field.name) ? 'bg-gray-50 cursor-not-allowed' : ''\n//                   }`}\n//                   placeholder={field.label}\n//                 />\n//               )}\n//             </div>\n//           ))}\n//         </div>\n\n//         <button\n//           type=\"submit\"\n//           disabled={loading}\n//           className=\"mt-6 w-full md:w-auto bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2 font-medium disabled:opacity-50 disabled:cursor-not-allowed\"\n//         >\n//           {loading ? (\n//             <>\n//               <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n//               <span>Submitting...</span>\n//             </>\n//           ) : (\n//             <>\n//               <Save size={20} />\n//               <span>Submit</span>\n//             </>\n//           )}\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default DataEntryForm;","map":{"version":3,"names":[],"sources":["C:/Users/swala/Desktop/turmeric_sangli/turmeric-frontend/src/components/DataEntryForm.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Save, AlertCircle, MapPin, Loader } from 'lucide-react';\r\n// import { FORM_FIELDS, ROLES } from '../utils/constants';\r\n// import { API } from '../config/api';\r\n\r\n// const DataEntryForm = ({ userRole }) => {\r\n//   const [formData, setFormData] = useState({});\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState('');\r\n//   const [success, setSuccess] = useState('');\r\n//   const [gpsLoading, setGpsLoading] = useState(false);\r\n//   const [gpsError, setGpsError] = useState('');\r\n//   const [locationCaptured, setLocationCaptured] = useState(false);\r\n\r\n//   // Reset form and location state when userRole changes\r\n//   useEffect(() => {\r\n//     setFormData({});\r\n//     setLocationCaptured(false);\r\n//     setGpsError('');\r\n//     setError('');\r\n//     setSuccess('');\r\n//   }, [userRole]);\r\n\r\n//   const getFormFields = () => {\r\n//     switch (userRole) {\r\n//       case 'farmer': return FORM_FIELDS.HARVEST;\r\n//       case 'processor': return FORM_FIELDS.PROCESSING;\r\n//       case 'distributor': return FORM_FIELDS.DISTRIBUTOR;\r\n//       case 'supplier': return FORM_FIELDS.SUPPLIER;\r\n//       case 'shopkeeper': return FORM_FIELDS.SHOPKEEPER;\r\n//       default: return [];\r\n//     }\r\n//   };\r\n\r\n//   const getRoleInfo = () => {\r\n//     return ROLES.find(role => role.id === userRole);\r\n//   };\r\n\r\n//   // Check if form has GPS fields\r\n//   const hasGPSFields = () => {\r\n//     const fields = getFormFields();\r\n//     return fields.some(field => \r\n//       field.name === 'latitude' || \r\n//       field.name === 'longitude' || \r\n//       field.name === 'gps_coordinates' ||\r\n//       field.name === 'location_lat' ||\r\n//       field.name === 'location_lng' ||\r\n//       field.name === 'gps_location' ||\r\n//       field.name === 'processing_gps' ||\r\n//       field.name === 'farm_gps' ||\r\n//       field.name === 'warehouse_gps' ||\r\n//       field.name === 'shop_gps'\r\n//     );\r\n//   };\r\n\r\n//   // Get current GPS location\r\n//   const getCurrentLocation = () => {\r\n//     return new Promise((resolve, reject) => {\r\n//       if (!navigator.geolocation) {\r\n//         reject(new Error('Geolocation is not supported by your browser'));\r\n//         return;\r\n//       }\r\n\r\n//       setGpsLoading(true);\r\n//       setGpsError('');\r\n\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         (position) => {\r\n//           resolve({\r\n//             latitude: position.coords.latitude,\r\n//             longitude: position.coords.longitude,\r\n//             accuracy: position.coords.accuracy\r\n//           });\r\n//           setGpsLoading(false);\r\n//         },\r\n//         (error) => {\r\n//           let errorMessage = 'Unable to retrieve location';\r\n//           switch (error.code) {\r\n//             case error.PERMISSION_DENIED:\r\n//               errorMessage = 'Location access denied. Please enable location permissions.';\r\n//               break;\r\n//             case error.POSITION_UNAVAILABLE:\r\n//               errorMessage = 'Location information unavailable.';\r\n//               break;\r\n//             case error.TIMEOUT:\r\n//               errorMessage = 'Location request timed out.';\r\n//               break;\r\n//             default:\r\n//               errorMessage = 'An unknown error occurred while getting location.';\r\n//           }\r\n//           setGpsError(errorMessage);\r\n//           setGpsLoading(false);\r\n//           reject(new Error(errorMessage));\r\n//         },\r\n//         {\r\n//           enableHighAccuracy: true,\r\n//           timeout: 10000,\r\n//           maximumAge: 0\r\n//         }\r\n//       );\r\n//     });\r\n//   };\r\n\r\n//   const handleGetLocation = async () => {\r\n//     try {\r\n//       const location = await getCurrentLocation();\r\n//       const fields = getFormFields();\r\n      \r\n//       // Update form data based on field names present in current role\r\n//       setFormData(prev => {\r\n//         const updated = { ...prev };\r\n        \r\n//         fields.forEach(field => {\r\n//           // Handle various GPS field naming conventions\r\n//           if (field.name === 'latitude' || field.name === 'location_lat') {\r\n//             updated[field.name] = location.latitude.toFixed(6);\r\n//           }\r\n//           if (field.name === 'longitude' || field.name === 'location_lng') {\r\n//             updated[field.name] = location.longitude.toFixed(6);\r\n//           }\r\n//           if (field.name === 'gps_coordinates' || \r\n//               field.name === 'gps_location' || \r\n//               field.name === 'processing_gps' ||\r\n//               field.name === 'farm_gps' ||\r\n//               field.name === 'warehouse_gps' ||\r\n//               field.name === 'shop_gps') {\r\n//             updated[field.name] = `${location.latitude.toFixed(6)}, ${location.longitude.toFixed(6)}`;\r\n//           }\r\n//         });\r\n        \r\n//         return updated;\r\n//       });\r\n      \r\n//       setLocationCaptured(true);\r\n//       setSuccess(`Location captured for ${roleInfo.name} (Accuracy: ${location.accuracy.toFixed(0)}m)`);\r\n//       setTimeout(() => setSuccess(''), 3000);\r\n//     } catch (err) {\r\n//       setLocationCaptured(false);\r\n//       // Error is already set by getCurrentLocation\r\n//     }\r\n//   };\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value, type, checked } = e.target;\r\n//     setFormData(prev => ({\r\n//       ...prev,\r\n//       [name]: type === 'checkbox' ? checked : value\r\n//     }));\r\n//     setError('');\r\n//   };\r\n\r\n//   const validateForm = () => {\r\n//     const fields = getFormFields();\r\n//     for (let field of fields) {\r\n//       if (field.required && !formData[field.name]) {\r\n//         setError(`${field.label} is required`);\r\n//         return false;\r\n//       }\r\n//     }\r\n\r\n//     // Check if GPS fields are required and captured\r\n//     if (hasGPSFields() && !locationCaptured) {\r\n//       setError('Please capture GPS location before submitting');\r\n//       return false;\r\n//     }\r\n\r\n//     return true;\r\n//   };\r\n\r\n//   const buildSubmitData = () => {\r\n//     const data = { ...formData };\r\n\r\n//     // Normalize supplier shopkeeper list (textarea or array)\r\n//     if (userRole === 'supplier') {\r\n//       const raw = data.shopkeeper_list;\r\n//       if (Array.isArray(raw)) {\r\n//         data.shopkeeper_list = raw;\r\n//       } else if (typeof raw === 'string' && raw.trim() !== '') {\r\n//         data.shopkeeper_list = raw.split(',').map(s => s.trim()).filter(Boolean);\r\n//       } else {\r\n//         data.shopkeeper_list = [];\r\n//       }\r\n//     }\r\n\r\n//     // Normalize numbers for processing\r\n//     if (userRole === 'processor') {\r\n//       if (data.moisture_content !== undefined && data.moisture_content !== '') {\r\n//         data.moisture_content = Number(data.moisture_content);\r\n//       }\r\n//       if (data.curcumin_content !== undefined && data.curcumin_content !== '') {\r\n//         data.curcumin_content = Number(data.curcumin_content);\r\n//       }\r\n//     }\r\n\r\n//     // Convert GPS coordinates to numbers if needed\r\n//     if (data.latitude) data.latitude = Number(data.latitude);\r\n//     if (data.longitude) data.longitude = Number(data.longitude);\r\n//     if (data.location_lat) data.location_lat = Number(data.location_lat);\r\n//     if (data.location_lng) data.location_lng = Number(data.location_lng);\r\n\r\n//     return data;\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n    \r\n//     if (!validateForm()) {\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     setError('');\r\n//     setSuccess('');\r\n\r\n//     try {\r\n//       const submitData = buildSubmitData();\r\n//       let response;\r\n      \r\n//       switch (userRole) {\r\n//         case 'farmer':\r\n//           response = await API.addHarvest(submitData);\r\n//           break;\r\n//         case 'processor':\r\n//           response = await API.addProcessing(submitData);\r\n//           break;\r\n//         case 'distributor':\r\n//           response = await API.addDistributor(submitData);\r\n//           break;\r\n//         case 'supplier':\r\n//           response = await API.addSupplier(submitData);\r\n//           break;\r\n//         case 'shopkeeper':\r\n//           response = await API.addShopkeeper(submitData);\r\n//           break;\r\n//         case 'admin':\r\n//           response = await API.addPacket(submitData);\r\n//           break;\r\n//         default:\r\n//           throw new Error('Invalid role');\r\n//       }\r\n      \r\n//       setSuccess(response?.data?.message || 'Data submitted successfully!');\r\n//       setFormData({});\r\n//       setLocationCaptured(false);\r\n//       setTimeout(() => setSuccess(''), 3000);\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.error || err.message || 'Failed to submit data');\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const roleInfo = getRoleInfo();\r\n//   const fields = getFormFields();\r\n//   const IconComponent = roleInfo?.icon;\r\n\r\n//   if (!roleInfo) {\r\n//     return null;\r\n//   }\r\n\r\n//   const isGPSField = (fieldName) => {\r\n//     return fieldName === 'latitude' || \r\n//            fieldName === 'longitude' || \r\n//            fieldName === 'gps_coordinates' ||\r\n//            fieldName === 'location_lat' ||\r\n//            fieldName === 'location_lng' ||\r\n//            fieldName === 'gps_location' ||\r\n//            fieldName === 'processing_gps' ||\r\n//            fieldName === 'farm_gps' ||\r\n//            fieldName === 'warehouse_gps' ||\r\n//            fieldName === 'shop_gps';\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-white rounded-lg shadow-lg p-6\">\r\n//       <div className=\"flex items-center gap-3 mb-6\">\r\n//         {IconComponent && (\r\n//           <div className={`bg-${roleInfo.color}-100 p-3 rounded-lg`}>\r\n//             <IconComponent className={`text-${roleInfo.color}-600`} size={24} />\r\n//           </div>\r\n//         )}\r\n//         <div>\r\n//           <h2 className=\"text-2xl font-bold text-gray-800\">\r\n//             {roleInfo.name} Data Entry\r\n//           </h2>\r\n//           <p className=\"text-sm text-gray-500\">{roleInfo.description}</p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {error && (\r\n//         <div className=\"mb-4 p-4 bg-red-50 border-l-4 border-red-500 rounded flex items-start gap-2\">\r\n//           <AlertCircle className=\"text-red-500 mt-0.5\" size={20} />\r\n//           <div>\r\n//             <p className=\"font-medium text-red-800\">Error</p>\r\n//             <p className=\"text-sm text-red-600\">{error}</p>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {gpsError && (\r\n//         <div className=\"mb-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded flex items-start gap-2\">\r\n//           <AlertCircle className=\"text-yellow-600 mt-0.5\" size={20} />\r\n//           <div>\r\n//             <p className=\"font-medium text-yellow-800\">Location Error</p>\r\n//             <p className=\"text-sm text-yellow-700\">{gpsError}</p>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {success && (\r\n//         <div className=\"mb-4 p-4 bg-green-50 border-l-4 border-green-500 rounded flex items-start gap-2\">\r\n//           <AlertCircle className=\"text-green-500 mt-0.5\" size={20} />\r\n//           <div>\r\n//             <p className=\"font-medium text-green-800\">Success</p>\r\n//             <p className=\"text-sm text-green-600\">{success}</p>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {hasGPSFields() && (\r\n//         <div className={`mb-4 p-4 border rounded-lg ${\r\n//           locationCaptured ? 'bg-green-50 border-green-200' : 'bg-blue-50 border-blue-200'\r\n//         }`}>\r\n//           <div className=\"flex items-center justify-between\">\r\n//             <div className=\"flex items-center gap-2\">\r\n//               <MapPin className={locationCaptured ? 'text-green-600' : 'text-blue-600'} size={20} />\r\n//               <div>\r\n//                 <span className={`text-sm font-medium ${\r\n//                   locationCaptured ? 'text-green-900' : 'text-blue-900'\r\n//                 }`}>\r\n//                   GPS Location for {roleInfo.name} Stage\r\n//                 </span>\r\n//                 {locationCaptured && (\r\n//                   <p className=\"text-xs text-green-700 mt-1\">\r\n//                     ✓ Location captured for this stage\r\n//                   </p>\r\n//                 )}\r\n//               </div>\r\n//             </div>\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={handleGetLocation}\r\n//               disabled={gpsLoading}\r\n//               className={`flex items-center gap-2 px-4 py-2 text-white rounded-lg transition-colors text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed ${\r\n//                 locationCaptured \r\n//                   ? 'bg-green-600 hover:bg-green-700' \r\n//                   : 'bg-blue-600 hover:bg-blue-700'\r\n//               }`}\r\n//             >\r\n//               {gpsLoading ? (\r\n//                 <>\r\n//                   <Loader className=\"animate-spin\" size={16} />\r\n//                   <span>Getting Location...</span>\r\n//                 </>\r\n//               ) : (\r\n//                 <>\r\n//                   <MapPin size={16} />\r\n//                   <span>{locationCaptured ? 'Update Location' : 'Capture Location'}</span>\r\n//                 </>\r\n//               )}\r\n//             </button>\r\n//           </div>\r\n//           {!locationCaptured && (\r\n//             <p className=\"text-xs text-blue-700 mt-2\">\r\n//               Click \"Capture Location\" to get GPS coordinates for this {roleInfo.name.toLowerCase()} stage.\r\n//             </p>\r\n//           )}\r\n//         </div>\r\n//       )}\r\n\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n//           {fields.map(field => (\r\n//             <div \r\n//               key={field.name} \r\n//               className={field.type === 'textarea' ? 'md:col-span-2' : ''}\r\n//             >\r\n//               <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n//                 {field.label}\r\n//                 {field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n//                 {isGPSField(field.name) && (\r\n//                   <span className=\"ml-2 text-xs text-blue-600 font-normal\">\r\n//                     (Auto-captured)\r\n//                   </span>\r\n//                 )}\r\n//               </label>\r\n              \r\n//               {field.type === 'textarea' ? (\r\n//                 <textarea\r\n//                   name={field.name}\r\n//                   value={formData[field.name] || ''}\r\n//                   onChange={handleChange}\r\n//                   className=\"w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-500 focus:border-transparent outline-none transition\"\r\n//                   rows=\"3\"\r\n//                   placeholder={field.label}\r\n//                 />\r\n//               ) : field.type === 'checkbox' ? (\r\n//                 <div className=\"flex items-center\">\r\n//                   <input\r\n//                     type=\"checkbox\"\r\n//                     name={field.name}\r\n//                     checked={formData[field.name] || false}\r\n//                     onChange={handleChange}\r\n//                     className=\"w-5 h-5 text-green-600 border-gray-300 rounded focus:ring-green-500\"\r\n//                   />\r\n//                   <span className=\"ml-2 text-sm text-gray-600\">\r\n//                     Mark as organic certified\r\n//                   </span>\r\n//                 </div>\r\n//               ) : (\r\n//                 <input\r\n//                   type={field.type}\r\n//                   name={field.name}\r\n//                   value={formData[field.name] || ''}\r\n//                   onChange={handleChange}\r\n//                   readOnly={isGPSField(field.name)}\r\n//                   className={`w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-green-500 focus:border-transparent outline-none transition ${\r\n//                     isGPSField(field.name) ? 'bg-gray-50 cursor-not-allowed' : ''\r\n//                   }`}\r\n//                   placeholder={field.label}\r\n//                 />\r\n//               )}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n\r\n//         <button\r\n//           type=\"submit\"\r\n//           disabled={loading}\r\n//           className=\"mt-6 w-full md:w-auto bg-green-600 text-white px-8 py-3 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2 font-medium disabled:opacity-50 disabled:cursor-not-allowed\"\r\n//         >\r\n//           {loading ? (\r\n//             <>\r\n//               <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\r\n//               <span>Submitting...</span>\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <Save size={20} />\r\n//               <span>Submit</span>\r\n//             </>\r\n//           )}\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DataEntryForm;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}